/*
 * Created by Andrew Tse,Patrick Caldwell, Josh Matthews
 * CSUSM Local Hack a day 2018
 */


#include <Servo.h>

/*************************************************
 * Public Constants
 *************************************************/
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988

#define NOTE_BLANK 0


//the pin the speaker is attached to:
int echoPin = 4;
int trigPin = 5;

int speakerPin = 8;

const int openDoor =10;

//The notes in our melody and their duration in fractions of a second

const int melody[][2] = 
{

  {NOTE_BLANK, 2},
  {NOTE_A4, 8},
  {NOTE_AS4, 8},
  {NOTE_B4, 8},
  {NOTE_C5, 1}
};

//a distances reading has to change more or less than
//than the recorded distance and the tolerance

float distance_to_door_tolerance = 10;
//the distance to our door in CM

//-1 means it has not yet been set
float distance_to_door = -1;

float get_distance_cm()
{
  float distanceCentimeters;
  int pulseLenMicroseconds;

  //bit-bang a small square wave
  //on the trig pin to start the range finder
  digitalWrite(trigPin, LOW);
  delayMicroseconds(20);
  digitalWrite(trigPin, HIGH);

  //measure the pulse length from the echo pin
  pulseLenMicroseconds = pulseIn(echoPin, HIGH);

  //calculate the distance using the speed of sound
  distanceCentimeters = pulseLenMicroseconds / 29.387 / 2;

  return distanceCentimeters;
}

// constants won't change. They're used here to set pin numbers:
const int lightCircuit = 9;  //Power for the light circut

// variables will change:
int sensorPin = A0;    // select the input pin for the potentiometer
int sensorValue = 0;  // variable to store the value coming from the sensor

int brightness = 0;    // how bright the light circut will be
int fadeAmount = 15;    // how many points to fade the light circuit by
bool on = false;       //set the light module on



int books_taken =0;




Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards

int pos = 0;    // variable to store the servo position






void setup()
{


  //sets the light circuit as an output pin
  pinMode( lightCircuit, OUTPUT);

  //set the pinmode on our ultrasonic echo, and trig pins.
  pinMode(echoPin, INPUT);
  pinMode(trigPin, OUTPUT);
  

    //figure out the number of notes in our melody
    int numberOfNotes = sizeof(melody) / sizeof(melody[0]);

    //iterate over the notes of the melody
    for(int thisNote = 0; thisNote < numberOfNotes; thisNote++)
    {
      //grab the note and note duration from our array
      int thisNoteTone = melody[thisNote][0];
      int thisNoteDuration = melody[thisNote][1];

      //calculate note duration in ms
      int noteDurationMS = 1000/thisNoteDuration;


    delay(noteDurationMS*1.30);
    }
    // stop the tone playing:
    noTone(8);


     myservo.attach(6);  // attaches the servo on pin 9 to the servo object

     Serial.begin(9600); // Starting Serial Terminal
}



void play()
{

      //figure out the number of notes in our melody
    int numberOfNotes = sizeof(melody) / sizeof(melody[0]);

    //iterate over the notes of the melody
    for(int thisNote = 0; thisNote < numberOfNotes; thisNote++)
    {
      //grab the note and note duration from our array
      int thisNoteTone = melody[thisNote][0];
      int thisNoteDuration = melody[thisNote][1];

      //calculate note duration in ms
      int noteDurationMS = 1000/thisNoteDuration;

      //play the note
      tone(speakerPin, thisNoteTone, noteDurationMS);

    delay(noteDurationMS*1.30);
    }
    // stop the tone playing:
    noTone(8);
  }




void loop() {

 float distance;

  //read the ultrasonic sensor
  distance = get_distance_cm();
   

  //if the distance is greater or less than our preset alarm
  //distance, and we have set a distance, sound the alarm.
  if(distance <= 10)
  {
     for (pos = 30; pos <= 140; pos += 1) 
     { 
         // goes from 0 degrees to 180 degrees
         // in steps of 1 degree
         myservo.write(pos);              // tell servo to go to position in variable 'pos'
         delay(15);                       // waits 15ms for the servo to reach the position
     }

      brightness =255;
      // turn LED on:
      analogWrite(lightCircuit, brightness);
      on =true;//set the light circuit to on
      
      //play the note
      play();
      //open door
      //play Zelda tune
  }
  else if( distance > 10 && on )
  {

      //keeps dimming the light module until 0
      while(brightness !=0)
      {
        
          brightness = brightness - fadeAmount;
          analogWrite(lightCircuit, brightness);
          delay(30);
      } 
      on= false; //finally set the light circuit to off

      
    
       for (pos= 140; pos >= 30; pos -= 1) 
       {  
          // goes from 180 degrees to 0 degrees
          myservo.write(pos);              // tell servo to go to position in variable 'pos'
          delay(15);                       // waits 15ms for the servo to reach the position
       }
  }

}



